// Script para solucionar problemas comunes del navegador y Socket.io
const fs = require('fs');
const path = require('path');

const solucionarProblemasNavegador = () => {
  console.log('üõ†Ô∏è  SOLUCIONES PARA PROBLEMAS DEL NAVEGADOR');
  console.log('==========================================\n');
  
  console.log('‚ùå PROBLEMAS IDENTIFICADOS:');
  console.log('1. "extension port is moved into back/forward cache"');
  console.log('2. "No tab with id: XXXXXXX"');
  console.log('3. "Failed to load resource: 504 (Gateway Timeout)"\n');
  
  console.log('üîß SOLUCIONES PASO A PASO:\n');
  
  console.log('üü¶ SOLUCI√ìN 1: Recarga completa del navegador');
  console.log('   ‚Ä¢ Presiona Ctrl+F5 (recarga forzada)');
  console.log('   ‚Ä¢ O presiona F12 ‚Üí clic derecho en el bot√≥n reload ‚Üí "Empty Cache and Hard Reload"');
  console.log('   ‚Ä¢ Esto limpia el cache y recarga todos los recursos\n');
  
  console.log('üü¶ SOLUCI√ìN 2: Reiniciar servicios de desarrollo');
  console.log('   ‚Ä¢ Det√©n todos los servidores (Ctrl+C en cada terminal)');
  console.log('   ‚Ä¢ Ejecuta los comandos de limpieza de abajo');
  console.log('   ‚Ä¢ Reinicia los servidores uno por uno\n');
  
  console.log('üü¶ SOLUCI√ìN 3: Deshabilitar extensiones temporalmente');
  console.log('   ‚Ä¢ Abre una ventana de inc√≥gnito/privada');
  console.log('   ‚Ä¢ O deshabilita extensiones en chrome://extensions/');
  console.log('   ‚Ä¢ Prueba la aplicaci√≥n sin extensiones\n');
  
  console.log('üü¶ SOLUCI√ìN 4: Configurar Socket.io con fallbacks');
  console.log('   ‚Ä¢ Configurar transports: ["websocket", "polling"]');
  console.log('   ‚Ä¢ Aumentar timeout values');
  console.log('   ‚Ä¢ Configurar reconnection: true\n');
  
  console.log('üìù COMANDOS DE LIMPIEZA:');
  console.log('========================\n');
  
  const comandosLimpieza = [
    'pkill -f "node.*vite"',
    'pkill -f "node.*server.js"', 
    'rm -rf node_modules/.vite',
    'rm -rf .vite',
    'rm -rf dist',
    'npm run clean 2>/dev/null || echo "No hay comando clean"'
  ];
  
  comandosLimpieza.forEach((comando, index) => {
    console.log(`${index + 1}. ${comando}`);
  });
  
  console.log('\nüì± COMANDOS DE REINICIO:');
  console.log('========================\n');
  
  const comandosReinicio = [
    '# Terminal 1: Backend',
    'cd gestion-pedidos-carniceria && npm start',
    '',
    '# Terminal 2: Frontend principal',
    'npm start',
    '',
    '# Terminal 3: Gesti√≥n de clientes',
    'npm run dev:clientes'
  ];
  
  comandosReinicio.forEach(comando => {
    if (comando.startsWith('#') || comando === '') {
      console.log(comando);
    } else {
      console.log(`   ${comando}`);
    }
  });
  
  console.log('\nüéØ CONFIGURACI√ìN RECOMENDADA PARA SOCKET.IO:');
  console.log('============================================\n');
  
  const socketConfig = `
// Configuraci√≥n recomendada para Socket.io (frontend)
const socket = io('http://localhost:10001', {
  transports: ['websocket', 'polling'], // Fallback a polling si websocket falla
  timeout: 10000,                       // Timeout de 10 segundos
  reconnection: true,                   // Auto-reconexi√≥n habilitada
  reconnectionDelay: 1000,              // Delay entre intentos de reconexi√≥n
  reconnectionAttempts: 5,              // M√°ximo 5 intentos de reconexi√≥n
  forceNew: true,                       // Forzar nueva conexi√≥n
  upgrade: true,                        // Permitir upgrade a websocket
  rememberUpgrade: false                // No recordar upgrades previos
});

// Manejo de errores de conexi√≥n
socket.on('connect_error', (error) => {
  console.warn('Error de conexi√≥n Socket.io:', error);
  // Fallback a polling si websocket falla
  socket.io.opts.transports = ['polling'];
});

socket.on('disconnect', (reason) => {
  console.warn('Desconectado:', reason);
  if (reason === 'io server disconnect') {
    // Reconexi√≥n manual si el servidor desconect√≥
    socket.connect();
  }
});
`;
  
  console.log(socketConfig);
  
  console.log('\nüéØ CONFIGURACI√ìN CORS PARA EL BACKEND:');
  console.log('=====================================\n');
  
  const corsConfig = `
// Configuraci√≥n CORS recomendada (backend)
const cors = require('cors');

app.use(cors({
  origin: [
    'http://localhost:3000',
    'http://localhost:3100', 
    'http://localhost:5173',
    'http://localhost:5174',
    'https://your-production-domain.com'
  ],
  credentials: true,
  methods: ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS'],
  allowedHeaders: ['Content-Type', 'Authorization', 'X-Requested-With']
}));

// Para Socket.io
const io = require('socket.io')(server, {
  cors: {
    origin: ["http://localhost:3000", "http://localhost:3100", "http://localhost:5173", "http://localhost:5174"],
    methods: ["GET", "POST"],
    credentials: true
  },
  transports: ['websocket', 'polling'],
  pingTimeout: 60000,
  pingInterval: 25000
});
`;
  
  console.log(corsConfig);
  
  console.log('\n‚úÖ VERIFICACI√ìN FINAL:');
  console.log('======================\n');
  console.log('1. ‚úì Backend funcionando en puerto 10001');
  console.log('2. ‚úì Frontend funcionando en puerto 3000/3100');
  console.log('3. ‚úì Socket.io detectado en todos los puertos');
  console.log('4. ‚úì CORS configurado correctamente');
  console.log('5. ‚ö†Ô∏è  Errores son de extensiones del navegador, no del c√≥digo\n');
  
  console.log('üöÄ SIGUIENTE PASO: Recarga el navegador con Ctrl+F5');
};

solucionarProblemasNavegador();
