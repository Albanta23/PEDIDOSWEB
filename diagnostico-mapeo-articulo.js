#!/usr/bin/env node

/**
 * Script de diagn√≥stico para verificar el mapeo del c√≥digo de producto en la columna ARTICULO
 */

// Simular diferentes escenarios de l√≠neas de producto
const escenariosPrueba = [
  {
    nombre: 'Producto CON codigoSage',
    linea: {
      producto: 'Jam√≥n Ib√©rico',
      codigoSage: 'JAM001', // üîç C√ìDIGO EXISTENTE
      cantidad: 1,
      peso: 2.5,
      formato: 'kg',
      cantidadEnviada: 1,
      precioUnitario: 45.00
    }
  },
  {
    nombre: 'Producto SIN codigoSage (deber√≠a generar autom√°tico)',
    linea: {
      producto: 'Chorizo Casero',
      // codigoSage: undefined, // üîç SIN C√ìDIGO - debe generar autom√°tico
      cantidad: 3,
      peso: 1.8,
      formato: 'unidad',
      cantidadEnviada: 3,
      precioUnitario: 12.50
    }
  },
  {
    nombre: 'Producto con codigoSage vac√≠o',
    linea: {
      producto: 'Morcilla',
      codigoSage: '', // üîç C√ìDIGO VAC√çO - debe generar autom√°tico
      cantidad: 2,
      peso: 1.2,
      formato: 'kg',
      cantidadEnviada: 2,
      precioUnitario: 8.90
    }
  },
  {
    nombre: 'L√≠nea de comentario (art√≠culo debe estar vac√≠o)',
    linea: {
      esComentario: true,
      comentario: 'Instrucciones especiales de entrega',
      // No debe tener c√≥digo de art√≠culo
    }
  }
];

console.log('üîç DIAGN√ìSTICO MAPEO C√ìDIGO PRODUCTO ‚Üí COLUMNA ARTICULO');
console.log('====================================================\n');

function diagnosticarMapeoArticulo(linea, index) {
  console.log(`üì¶ Escenario: ${escenariosPrueba[index].nombre}`);
  console.log('‚îÄ'.repeat(60));
  
  // Mostrar datos de entrada
  console.log('üì• DATOS DE ENTRADA:');
  console.log(`   - Producto: "${linea.producto || 'N/A'}"`);
  console.log(`   - codigoSage: "${linea.codigoSage || 'undefined'}"`);
  console.log(`   - Es comentario: ${linea.esComentario ? 'S√ç' : 'NO'}`);
  
  // Aplicar la l√≥gica actual del controlador
  let codigoArticuloFinal;
  
  if (!linea.esComentario && linea.producto) {
    // L√≠nea de producto - aplicar l√≥gica actual
    codigoArticuloFinal = linea.codigoSage || `ART${String(index + 1).padStart(5, '0')}`;
    console.log('\n‚úÖ L√ìGICA APLICADA: L√≠nea de producto');
    console.log(`   - Usar codigoSage si existe: "${linea.codigoSage || 'no existe'}"`);
    console.log(`   - Si no existe, generar: "ART${String(index + 1).padStart(5, '0')}"`);
  } else if (linea.esComentario) {
    // L√≠nea de comentario - art√≠culo vac√≠o
    codigoArticuloFinal = '';
    console.log('\n‚úÖ L√ìGICA APLICADA: L√≠nea de comentario');
    console.log('   - C√≥digo art√≠culo debe estar vac√≠o');
  }
  
  // Resultado final
  console.log('\nüéØ RESULTADO PARA SAGE50:');
  console.log(`   - COLUMNA ARTICULO: "${codigoArticuloFinal}"`);
  console.log(`   - FORMATO: ${typeof codigoArticuloFinal} (debe ser string/alfanum√©rico)`);
  
  // Verificaciones
  const formatoCorrecto = typeof codigoArticuloFinal === 'string';
  const tieneValor = linea.esComentario ? codigoArticuloFinal === '' : codigoArticuloFinal !== '';
  
  console.log('\nüîç VERIFICACIONES:');
  console.log(`   ‚úÖ Formato alfanum√©rico (string): ${formatoCorrecto ? '‚úÖ S√ç' : '‚ùå NO'}`);
  console.log(`   ‚úÖ Valor apropiado: ${tieneValor ? '‚úÖ S√ç' : '‚ùå NO'}`);
  
  if (!linea.esComentario) {
    const usaCodigoOriginal = linea.codigoSage && codigoArticuloFinal === linea.codigoSage;
    const usaCodigoGenerado = !linea.codigoSage && codigoArticuloFinal.startsWith('ART');
    console.log(`   ‚úÖ Usa c√≥digo original si existe: ${usaCodigoOriginal ? '‚úÖ S√ç' : '‚ö†Ô∏è  N/A'}`);
    console.log(`   ‚úÖ Genera c√≥digo si no existe: ${usaCodigoGenerado ? '‚úÖ S√ç' : '‚ö†Ô∏è  N/A'}`);
  }
  
  const verificacionCompleta = formatoCorrecto && tieneValor;
  console.log(`\nüèÜ VERIFICACI√ìN COMPLETA: ${verificacionCompleta ? '‚úÖ CORRECTO' : '‚ùå ERROR'}`);
  console.log('\n' + '='.repeat(60) + '\n');
  
  return {
    codigoFinal: codigoArticuloFinal,
    correcto: verificacionCompleta
  };
}

// Ejecutar diagn√≥sticos
const resultados = escenariosPrueba.map((escenario, index) => 
  diagnosticarMapeoArticulo(escenario.linea, index)
);

// Resumen final
console.log('üìä RESUMEN GENERAL:');
console.log('==================');
const todosCorrectos = resultados.every(r => r.correcto);
console.log(`üéØ Todos los mapeos correctos: ${todosCorrectos ? '‚úÖ S√ç' : '‚ùå NO'}`);

console.log('\nüìã C√ìDIGOS GENERADOS:');
resultados.forEach((resultado, index) => {
  console.log(`   ${index + 1}. "${resultado.codigoFinal}"`);
});

console.log('\nüí° FORMATO SAGE50 COLUMNA ARTICULO:');
console.log('- Tipo: Alfanum√©rico (string)');
console.log('- Productos: C√≥digo del art√≠culo (codigoSage o generado)');
console.log('- Comentarios: Vac√≠o (se interpreta como l√≠nea de nota)');

if (todosCorrectos) {
  console.log('\nüéâ ¬°El mapeo de la columna ARTICULO est√° funcionando correctamente!');
} else {
  console.log('\n‚ùå Hay problemas en el mapeo de la columna ARTICULO');
}
